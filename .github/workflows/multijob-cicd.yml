name: CI-CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1️⃣ Build
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn -B clean package
      - name: Upload Build Artifact (JAR + Dockerfile)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            Dockerfile

  # 2️⃣ Test (depends on Build)
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Run Tests
        run: mvn test

  # 3️⃣ SonarQube Scan (depends on Test)
  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: SonarQube Scan
        run: mvn sonar:sonar -Dsonar.projectKey=Ayushicybage_github-actions-Poc- -Dsonar.organization=ayushicybage -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # 4️⃣ Docker Build & Push (depends on Sonar)
  docker:
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - uses: actions/checkout@v4

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Log in to GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build & Push to both registries
      - name: Build and Push Docker Images
        run: |
          IMAGE_NAME=myapp
          DOCKER_TAG=${{ github.sha }}
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')

          # Build image with both tags
          docker build -t ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$DOCKER_TAG \
                       -t ghcr.io/$OWNER/$IMAGE_NAME:$DOCKER_TAG \
                       -t ghcr.io/$OWNER/$IMAGE_NAME:latest .

          # Push to Docker Hub
          docker push ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$DOCKER_TAG

          # Push to GHCR (both commit SHA + latest)
          docker push ghcr.io/$OWNER/$IMAGE_NAME:$DOCKER_TAG
          docker push ghcr.io/$OWNER/$IMAGE_NAME:latest


  # 5️⃣ Deploy (depends on Docker)
  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Deploy Application
        run: echo "Here you can add deployment script (SSH to server, k8s apply, etc.)"

 # 6️⃣ Notifications (runs always, after all jobs)
  notify:
    runs-on: ubuntu-latest
    needs: [build, test, sonar, docker, deploy]  # wait for all
    if: failure()   # only run if something failed
    steps:
      - name: Notify via Slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": "❌ CI/CD Pipeline failed in repo *${{ github.repository }}* on commit `${{ github.sha }}`. Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

